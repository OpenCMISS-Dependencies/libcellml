/**
 * @file
 * The CIS, or CellML Integration Service, allows models to be run (integrated).
 * Information about the procedural steps being run, such as information on
 * assigned variable indices, is accessible via the CCGS.
 */
#include "xpcom.idl"
#include "CCGS.idl"

/**
 * A module for various CellML Services.
 */
module cellml_services
{
  typedef sequence<double> DoubleSeq;

  enum ODEIntegrationStepType
  {
    RUNGE_KUTTA_2_3,
    RUNGE_KUTTA_4,
    RUNGE_KUTTA_FEHLBERG_4_5,
    RUNGE_KUTTA_CASH_KARP_4_5,
    RUNGE_KUTTA_PRINCE_DORMAND_8_9,
    RUNGE_KUTTA_IMPLICIT_2,
    RUNGE_KUTTA_IMPLICIT_2_SOLVE,
    RUNGE_KUTTA_IMPLICIT_4,
    BULIRSCH_STOER_IMPLICIT_BD,
    GEAR_1,
    GEAR_2,
    ADAMS_MOULTON_1_12,
    BDF_IMPLICIT_1_5_SOLVE
  };

  interface IntegrationProgressObserver
    : XPCOM::IObject
  {
    /**
     * Called once the computed constants have been evaluated.
     * @param values A sequence of computed constant values. The indices into
     * the sequence match those provided by the CCGS.
     */
    void computedConstants(in DoubleSeq values);

    /**
     * Called when integration results become available. The first results
     * reproduce the initial conditions, with the second result being for the
     * initial plus the bvar increment, and so on.
     *
     * @param state A sequence of result entries, for one or more bvar values.
     *   Each entry has the following structure:
     *     <table>
     *       <tr><td>Index</td><td>Length</td><td>      Description                </td></tr>
     *       <tr><td>     0</td><td> 1</td><td>Variable of integration (e.g. time)</td></tr>
     *       <tr><td>     1</td><td>nS</td><td>The states array, using indices from the CCGS.</td></tr>
     *       <tr><td>  nS+1</td><td>nS</td><td>The rates array.</td></tr>
     *       <tr><td>2*nS+1</td><td>nA</td><td>The algebraic variables array.</td></tr>
     *     </table>
     *   nS is the number of state variables, nA is the number of algebraic
     *   variables.
     *
     *   Any individual call of results() will carry one or more of the above
     *   records, and so will contain an exact multiple of 2*nS + 1 + nA
     *   doubles in the sequence.
     */
    void results(in DoubleSeq state);

    /**
     * Called after integration has sucessfully completed.
     */
    void done();

    /**
     * Called if integration has failed.
     * @param errorMessage An error message describing why it failed.
     */
    void failed(in string errorMessage);
  };
#pragma terminal-interface
#pragma user-callback

  interface CellMLIntegrationRun
    : XPCOM::IObject
  {
    /**
     * Sets a standard step size control function.
     * @param epsAbs The absolute error control.
     * @param epsRel The relative error control.
     * @param scalVar The weighting of the variables in the error control
     *                equation.
     * @param scalRate The weighting of the rates in the error control
     *                 equation.
     * @param maxStep The maximum step size to ever take.
     */
    void setStepSizeControl(in double epsAbs, in double epsRel,
                            in double scalVar, in double scalRate,
                            in double maxStep);

    /**
     * Sets a tabulation interval. 
     * @param tabulationStepSize The tabulation step size. If set to zero, it
     *                    will be internally set to the final value of the
     *                    bound variable.
     * @param strictTabulation If true, only tabulate at tabulation points.
     *                         Otherwise, at least ensure that there are data 
     *                         points at the tabulation points.
     **/
     void setTabulationStepControl(in double tabulationStepSize, in boolean strictTabulation);

    /**
     * Sets the range of results to be returned.
     * @param startBvar The first value of the bound variable.
     * @param stopBvar The final value of the bound variable.
     * @param maxPointDensity The maximum point density allowed across any bound
     *        variable range containing two or more points. The density is
     *        expressed in terms of points between stopBvar and startBvar.
     * Note that startBvar <= stopBvar is required to get integration results.
     * However, it is not an error otherwise, and so this can be used to get
     * results when there are no ODEs involved (for example, to find the value
     * of computed constants).
     */
    void setResultRange(in double startBvar, in double stopBvar,
                        in double maxPointDensity);

    /**
     * Sets the progress observer...
     * @param ipo The progress observer to set. If this is null, the progress
     *            observer is cleared. Note that there can only be a single
     *            progress observer at any one time.
     */
    void setProgressObserver(in IntegrationProgressObserver ipo);

    /**
     * Sets an initial condition override. This is used to change parameters
     * which have been modified since the model was compiled, without forcing
     * a recompilation.
     * @param type The type of variable to set. Can be CONSTANT (sets the
     *   value of the constant) or STATE_VARIABLE (sets the initial value of the
     *   the state variable).
     * @param variableIndex The index into the relevant array, as provided by
     *                      the CCGS VariableInformation structures. When
     *                      working with second or higher differentials, you
     *                      can use this to specify which derivative.
     * @param newValue The value to assign.
     */
    void setOverride(
                     in cellml_services::VariableEvaluationType type,
                     in unsigned long variableIndex,
                     in double newValue
                    ) raises(cellml_api::CellMLException);

    /**
     * Starts the integration running. Results will get notified to the
     * progress observer.
     */
    void start();

    /**
     * Requests that the integration stop immediately.
     */
    void stop();

    /**
     * Requests that the integration be paused; no further results will be
     * delivered until resume() is called. It is the responsibility of the
     * caller to ensure that resume() is called for every call to pause(),
     * even if 
     * operation other than resume() on the CellMLIntegrationRun after
     * pause has been called.
     */
    void pause();

    /**
     * Requests that the integration, which has previously been stopped with
     * pause, be resumed.
     **/
    void resume();
  };

  interface ODESolverRun
    : CellMLIntegrationRun
  {
    /**
     * The algorithm used to advance steps. This may only be set once.
     */
    attribute ODEIntegrationStepType stepType;
  };
#pragma terminal-interface

  interface DAESolverRun
    : CellMLIntegrationRun
  {
  };
#pragma terminal-interface

  interface CellMLCompiledModel
    : XPCOM::IObject
  {
    /**
     * The corresponding CellML model.
     */
    readonly attribute cellml_api::Model model;

    /**
     * Information about the generated code which was compiled.
     */
    readonly attribute cellml_services::CodeInformation codeInformation;
  };

  interface ODESolverCompiledModel
    : CellMLCompiledModel
  {
  };
#pragma terminal-interface

  interface DAESolverCompiledModel
    : CellMLCompiledModel
  {
  };
#pragma terminal-interface

  interface CellMLIntegrationService
    : XPCOM::IObject
  {
    /**
     * Called to compile the model for use with an ODE-style solver.
     * @param aModel The model to compile.
     * @note Reference Implementation Specific Note: The CellML API Reference
     *       Implementation requires that gcc be present in the path for this
     *       call to succeed unless it was compiled with LLVM / Clang support.
     */
    ODESolverCompiledModel compileModelODE(in cellml_api::Model aModel)
      raises(cellml_api::CellMLException);

    /**
     * Called to compile the model for use with an ODE-style solver. The
     * compiled model will be instrumented with checks that identify a wider
     * range of numerical problems at the expression where the problem first
     * arises. For example, numerical overflow, division by zero, and taking
     * the log of a negative number can be caught. This additional
     * error checking will slow down the simulation.
     * @param aModel The model to compile.
     * @note Reference Implementation Specific Note: The CellML API Reference
     *       Implementation requires that gcc be present in the path for this
     *       call to succeed unless it was compiled with LLVM / Clang support.
     */
    ODESolverCompiledModel compileDebugModelODE(in cellml_api::Model aModel)
      raises(cellml_api::CellMLException);

    /**
     * Called to compile the model for use with a DAE-style solver like IDA.
     * @param aModel The model to compile.
     * @note Reference Implementation Specific Note: The CellML API Reference
     *       Implementation requires that gcc be present in the path for this
     *       call to succeed unless it was compiled with LLVM / Clang support.
     */
    DAESolverCompiledModel compileModelDAE(in cellml_api::Model aModel)
      raises(cellml_api::CellMLException);

    /**
     * Called to compile the model for use with a DAE-style solver like IDA. The
     * compiled model will be instrumented with checks that identify a wider
     * range of numerical problems at the expression where the problem first
     * arises. For example, numerical overflow, division by zero, and taking
     * the log of a negative number can be caught. This additional
     * error checking will slow down the simulation.
     * @param aModel The model to compile.
     * @note Reference Implementation Specific Note: The CellML API Reference
     *       Implementation requires that gcc be present in the path for this
     *       call to succeed unless it was compiled with LLVM / Clang support.
     */
    DAESolverCompiledModel compileDebugModelDAE(in cellml_api::Model aModel)
      raises(cellml_api::CellMLException);

    /**
     * Creates an integration run object used to run integration with an ODE solver.
     * @param aModel A compiled model (which must have been created from the same
     *               CellMLIntegrationService object.
     */
    ODESolverRun createODEIntegrationRun(in ODESolverCompiledModel aModel);

    /**
     * Creates an integration run object used to run integration with a DAE solver.
     * @param aModel A compiled model (which must have been created from the same
     *               CellMLIntegrationService object.
     */
    DAESolverRun createDAEIntegrationRun(in DAESolverCompiledModel aModel);

    /**
     * Returns a description of the last error.
     */
    readonly attribute wstring lastError;
  };
#pragma terminal-interface
};
