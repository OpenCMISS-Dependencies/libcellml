#ifndef INCLUDED_RDF_APISPEC
#define INCLUDED_RDF_APISPEC

#include "xpcom.idl"
#include "CellML_APISPEC.idl"
#include "DOM_APISPEC.idl"

/**
 * This module contains a description of an Application Programming Interface
 * for RDF in the language-neutral IDL form.
 */
module rdf_api
{
  interface TripleSet;
  interface Triple;
  interface Resource;
  interface URIReference;
  interface BlankNode;
  interface PlainLiteral;
  interface TypedLiteral;
  interface Container;

  exception RDFProcessingError
  {
  };

  /**
   * A top-level interface for this RDF API.
   */
  interface DataSource
    : XPCOM::IObject
  {
    /**
     * Fetches a URI reference resource. This resource is specific to this
     * data source and cannot be used with objects retrieved via another data
     * source.
     * @param aURI The URI of the resource to fetch.
     * @return The URI reference resource.
     */
    URIReference getURIReference(in wstring aURI);

    /**
     * Creates a blank node. This resource is specific to this data source
     * and cannot be used with objects retrieved via another data source.
     * Calling createBlankNode several times will create a new blank node each
     * time.
     * @return The new blank node.
     */
    BlankNode createBlankNode();

    /**
     * Fetches a plain literal. This resource is specific to this data source
     * and cannot be used with objects retrieved via another data source.
     * @param aForm The lexical form of the literal.
     * @param aLanguage The language of the literal.
     * @return The plain literal.
     */
    PlainLiteral getPlainLiteral(in wstring aForm, in wstring aLanguage);

    /**
     * Fetches a typed literal. This resource is specific to this data source
     * and cannot be used with objects retrieved via another data source.
     * @param aForm The lexical form of the literal.
     * @param datatypeURI The datatype URI for the literal.
     * @return The plain literal.
     */
    TypedLiteral getTypedLiteral(in wstring aForm, in wstring datatypeURI);

    /**
     * Fetches the set of all triples present anywhere in the model.
     * @return The set of all triples.
     */
    TripleSet getAllTriples();
  };
#pragma terminal-interface

  /**
   * A node (resource or literal) in RDF. This is always associated with a
   * specific datasource.
   */
  interface Node
    : XPCOM::IObject
  {
    /**
     * Finds all the triples for which this node is the object.
     * @return The set of all triples where this node is the object.
     */
    TripleSet getTriplesInto();

    /**
     * Fetches all triples for which this node is the object and aPredicate
     * is the predicate.
     * @param aPredicate The predicate we are looking for.
     * @return The set of all triples meeting the constraints.
     */
    TripleSet getTriplesIntoByPredicate(in Resource aPredicate);
  };

  /**
   * A resource in RDF. This is always associated with a specific datasource.
   */
  interface Resource
    : Node
  {
    /**
     * Finds all the triples for which this node is the subject and the
     * parameter is the predicate.
     * @param aPredicate The predicate we are searching on.
     * @return The set of all triples meeting the constraints.
     */
    TripleSet getTriplesOutOfByPredicate(in Resource aPredicate);

    /**
     * Finds a triple for which this node is the subject and the
     * parameter is the predicate if possible.
     * @param aPredicate The predicate we are searching on.
     * @return A triple meeting the constraints.
     * @exception RDFProcessingError if there was no matching triple found.
     */
    Triple getTripleOutOfByPredicate(in Resource aPredicate)
      raises(RDFProcessingError);

    /**
     * Determines if there is a triple where this node is the subject, and
     * aPredicate is the predicate and aObject is the object.
     * @param aPredicate The predicate to search for.
     * @param aObject The object to search for.
     * @return True if and only if there is a matching triple.
     */
    boolean hasTripleOutOf(in Resource aPredicate, in Node aObject);

    /**
     * Creates a triple where this node is the subject, and
     * aPredicate is the predicate and aObject is the object.
     * If the triple being asserted has already been asserted, then nothing
     * happens.
     * @param aPredicate The predicate for the new triple.
     * @param aObject The object for the new triple.
     */
    void createTripleOutOf(in Resource aPredicate, in Node aObject);

    /**
     * Finds all the triples for which this node is the subject and the
     * parameter is the object.
     * @param aObject The object we are searching on.
     * @return The set of all triples meeting the constraints.
     */
    TripleSet getTriplesOutOfByObject(in Node aObject);

    /**
     * Finds all the triples for which this node is the predicate.
     * @return The set of all triples meeting the constraints.
     */
    TripleSet getTriplesWherePredicate();

    /**
     * Finds all the triples for which this node is the subject.
     * @return The set of all triples meeting the constraints.
     */
    TripleSet getTriplesWhereSubject();

    /**
     * Retrieves a 'Container' interface around this Resource.
     */
    readonly attribute Container correspondingContainer;

    /**
     * Finds or makes a particular container out of 'this', with the
     * specified predicate, and the specified type. If there are multiple
     * existing containers, the returned container is a merged view of all
     * containers. The underlying RDF is only changed if the container doesn't
     * already exist, in which case:
     *  A new triple (subject=this) (predicate=aPredicate) (object=new blank node 'A')
     *   is made.
     *  A new triple (subject=the new blank node 'A') (predicate=RDF type) (object=aContainerType)
     *   is made.
     *  The returned Container is the correspondingContainer around the new blank node 'A'.
     */
    Container findOrMakeContainer(in Resource aPredicate,
                                  in Resource aContainerType);

    /**
     * Returns true iff there is a triple where this node is subject and the
     * parameters are predicate and object.
     * @param aPredicate The predicate of the triple to find.
     * @param aObject The object of the triple to find.
     * @return A triple meeting the constraints.
     * @exception RDFProcessingError if there was no matching triple found.
     */
    boolean hasTripleOutOfWithPredicateAndObject(in Resource aPredicate, in Node aObject);

    /**
     * Finds the triple for which this node is the subject and the
     * parameters are predicate and object, if one exists.
     * @param aPredicate The predicate of the triple to find.
     * @param aObject The object of the triple to find.
     * @return A triple meeting the constraints.
     * @exception RDFProcessingError if there was no matching triple found.
     */
    Triple getTripleOutOfByPredicateAndObject(in Resource aPredicate, in Node aObject)
      raises(RDFProcessingError);
  };

  /**
   * An interface for iterating nodes.
   */
  interface NodeIterator
    : XPCOM::IObject
  {
    /**
     * Retrieves the next RDF Node.
     */
    Node getNextNode();
  };

  /**
   * An RDF container.
   */
  interface Container
    : XPCOM::IObject
  {
    /**
     * Retrieves the resource this container is built on.
     */
    readonly attribute Resource correspondingResource;

    /**
     * Finds the type of container (or one of the types, if there are multiple
     * types).
     */
    attribute Resource containerType;

    /**
     * Iterates through all children in this container.
     */
    NodeIterator iterateChildren();

    /**
     * Appends a child to this container. The child will have the first free
     * index, even if there is a higher index already in use.
     */
    void appendChild(in Node aChild);

    /**
     * Removes a child. If aDoRenumbering is true, will also reduce the value of
     * any existing indices above the one of the child being removed by one.
     * Otherwise, leaves a gap in the numbering.
     */
    void removeChild(in Node aChild, in boolean aDoRenumbering);

    /**
     * Renumbers all indices in the container to be consecutive starting from 1.
     */
    void renumberContainer();

    /**
     * Creates a merged container. This does not change the RDF, but merely
     * creates a merged view.
     * Merged containers return the same correspondingResource and type as
     * this (not aContainer). Iterating children will iterate
     * the children of this, and then the children of aContainer (with
     * repetition possible). appendChild will have the same effect as performing
     * appendChild on this. removeChild will have the same effect as performing
     * removeChild on this and aContainer. renumberContainer will have the same
     * effect as performing the renumber on each container separately. Merged
     * containers can in turn be further merged.
     */
    Container mergeWith(in Container aContainer);
  };

  /**
   * A blank node in RDF. This is always associated with a specific datasource.
   */
  interface BlankNode
    : Resource
  {
  };
#pragma terminal-interface

  /**
   * A URI reference in RDF. This is always associated with a specific
   * datasource.
   */
  interface URIReference
    : Resource
  {
    /**
     * Fetches the URI.
     */
    readonly attribute wstring URI;
  };
#pragma terminal-interface

  /**
   * A literal of some kind in RDF. This is always associated with a specific
   * datasource.
   */
  interface Literal
    : Node
  {
    /**
     * The lexical form of the literal.
     */
    readonly attribute wstring lexicalForm;
  };

  /**
   * A plain (untyped) literal in RDF. This is always associated with a specific
   * datasource.
   */
  interface PlainLiteral
    : Literal
  {
    /**
     * The language of the literal.
     */
    readonly attribute wstring language;
  };
#pragma terminal-interface;

  /**
   * A typed literal in RDF. This is always associated with a specific
   * datasource.
   */
  interface TypedLiteral
    : Literal
  {
    /**
     * The data type URI of the typed literal.
     */
    readonly attribute wstring datatypeURI;
  };
#pragma terminal-interface;

  /**
   * A triple in RDF. This is always associated with a specific
   * datasource.
   */
  interface Triple
    : XPCOM::IObject
  {
    /**
     * The subject of the triple.
     */
    readonly attribute Resource subject;

    /**
     * The predicate of the triple.
     */
    readonly attribute Resource predicate;

    /**
     * The object of the triple.
     */
    readonly attribute Node _object;

    /**
     * Removes the assertion from the data source. Once this has been done,
     * the only way to re-add it is to make another triple with the same
     * information. If the triple is not currently asserted on the data source
     * at the time of the call, nothing happens. Objects implementing this
     * interface are not invalidated when a triple is unasserted. If an identical
     * triple is unasserted and subsequently re-added, unassert will still remove
     * the triple.
     */
    void unassert();
  };
#pragma terminal-interface

  interface TripleEnumerator
    : XPCOM::IObject
  {
    /**
     * Retrieves the next triple from this enumerator, or return null if there
     * are no more triples.
     */
    Triple getNextTriple();
  };
#pragma terminal-interface
  
  /**
   * Represents a set of triples. This object is live in the sense that it
   * will remain up to date with changes made to the RDF triples.
   */
  interface TripleSet
    : XPCOM::IObject
  {
    /**
     * Creates a new triple enumerator.
     */
    TripleEnumerator enumerateTriples();
  };
#pragma terminal-interface

  interface Bootstrap
    : XPCOM::IObject
  {
    /**
     * Creates an empty data source.
     */
    DataSource createDataSource();

    /**
     * Parses RDF/XML, using the specified element as the root, putting triples
     * into the DataSource.
     * @exception RDFProcessingError if parsing fails.
     * @param ds The DataSource to put triples into.
     * @param root The root element of the RDF/XML serialisation to parse.
     * @param baseURI The base URI against which to resolve relative URIs.
     */
    void parseIntoDataSource(in DataSource ds, in dom::Element root, in wstring baseURI)
      raises(RDFProcessingError);

    /**
     * Creates a DOM Document which, if serialised, would result in a valid
     * RDF/XML serialisation of DataSource.
     * @param ds The DataSource to fetch triples from.
     * @param baseURI The URI to assume the RDF/XML document will be stored at,
     *                and should generate URIs relative to.
     */
    dom::Document getDOMForDataSource(in DataSource ds, in wstring baseURI);

    /**
     * Serialises all the triples in the RDF DataSource into a string of
     * RDF/XML
     * @param ds The DataSource to fetch triples from.
     * @param baseURI The URI the parser should assume the RDF will be stored
     *                at, and should generate URIs relative to.
     */
    wstring serialiseDataSource(in DataSource ds, in wstring baseURI);
  };
#pragma terminal-interface

  /**
   * The RDF representation for type="http://www.cellml.org/RDF/API"
   */
  interface RDFAPIRepresentation : cellml_api::RDFRepresentation
  {
    /**
     * The RDF DataSource being represented. This is created afresh from the
     * contents of the model every time you fetch it, and if you assign to it,
     * then the RDF/XML in the model will be updated from it. However, changes
     * made to the DataSource will not appear in the model until such an
     * assignment is made.
     */
    attribute DataSource source;
  };
#pragma terminal-interface
};

#endif // INCLUDED_RDF_APISPEC
