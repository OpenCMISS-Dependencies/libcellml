/**
 * @file
 * MaLaES (the MathML Language Expression Service) provides facilities for
 * converting from content MathML expressions (in the context of a CellML
 * component or reaction) into expressions in a particular programming
 * language. The translation into a programming language occurs according to a
 * special language description format called MAL.
 */
#ifndef _MaLaES_idl_
#define _MaLaES_idl_
#include "CUSES.idl"
#include "AnnoTools.idl"
#include "CeVAS.idl"

/**
 * A module for various CellML Services.
 */
module cellml_services
{
  /**
   * A source variable annotated by a degree.
   */
  interface DegreeVariable
    : XPCOM::IObject
  {
    /**
     * The source variable.
     */
    readonly attribute cellml_api::CellMLVariable variable;

    /**
     * The degree of the variable.
     * 0 = Used outside a derivative.
     * 1 = First order derivative.
     * 2 = Second order derivative.
     * ...
     */
    readonly attribute unsigned long degree;

    /**
     * Whether or not the variable appeared in its undelayed form
     * in the equation. This is true even if it also appears in a delayed
     * form as well (and there is only one entry, per degree, per variable).
     */
    readonly attribute boolean appearedUndelayed;

    /**
     * Whether or not the variable appeared in its infinitesimally delayed form
     * in the equation. This is true even if it also appears in the non-delayed
     * form as well (and there is only one entry, per degree, per variable).
     */
    readonly attribute boolean appearedInfinitesimallyDelayed;
  };

  /**
   * An interface allowing for iteration of variables by degree.
   */
  interface DegreeVariableIterator
    : XPCOM::IObject
  {
    /**
     * Fetches the next degree annotated variable.
     */
    DegreeVariable nextDegreeVariable();
  };

  /**
   * An interface allowing transformation results to be described.
   */
  interface MaLaESResult
    : XPCOM::IObject
  {
    /**
     * A string listing any errors that occurred. Applications should always
     * check this attribute, and if it is set to a non-empty string, should not
     * attempt to use any other operations or attributes on this interface.
     */
    readonly attribute wstring compileErrors;
    
    /**
     * The primary expression, in the transformed to language.
     */
    readonly attribute wstring expression;

    /**
     * The number of supplementary blocks defined.
     */
    readonly attribute unsigned long supplementariesLength;

    /**
     * Fetches a supplementary block by the index.
     * @param index The zero based index of the block to fetch.
     * @exception CellMLException if the index is out of range.
     */
    wstring getSupplementary(in unsigned long index)
      raises(cellml_api::CellMLException);

    /**
     * Iterates through the list of 'source' variables which are involved in
     * this result.
     */
    cellml_api::CellMLVariableIterator iterateInvolvedVariables();

    /**
     * Iterates through the list of 'source' variables annotated by their
     * degree (0 = used as a non-derivative, 1 = used as a first order
     *   derivative, ...)...
     */
    DegreeVariableIterator iterateInvolvedVariablesByDegree();

    /**
     * Iterates through the list of 'source' variables which are used as a
     * globally bound variable in this result. Globally bound variables are
     * those which are bound across the entire model (e.g. time).
     * Locally bound variables, such as those used inside definite integrals,
     * are not included in this set.
     * Be aware that this only works if the lookupDiffVariable command is used in the
     * MAL specification.
     */
    cellml_api::CellMLVariableIterator iterateBoundVariables();

    /**
     * Iterates through the list of 'source' variables which are used as a
     * locally bound variable in this result. Locally bound variables are
     * those which are bound within a single expression (e.g. definite integrals).
     * Globally bound variables, e.g. time in a time-varying model, are not
     * included in this set.
     * Be aware that this only works if the bvarIndex command is used in the
     * MAL specification.
     */
    cellml_api::CellMLVariableIterator iterateLocallyBoundVariables();

    /**
     * Retrieves the highest degree on any diff application / binding.
     * @param aVar The variable to look up.
     */
    unsigned long getDiffDegree(in cellml_api::CellMLVariable aVar);

    /**
     * True if the expression concerned involves external code.
     */
    readonly attribute boolean involvesExternalCode;
  };

  /**
   * A MaLaES transformer, which takes MathML inputs, and produces programming
   * language outputs.
   */
  interface MaLaESTransform
    : XPCOM::IObject
  {
    /**
     * A string listing any compile errors that occurred producing this
     * MaLaESTransform. Applications should always check this attribute, and if
     * it is set to a non-empty string, should not attempt to use any other
     * operations or attributes on this interface.
     */
    readonly attribute wstring compileErrors;

    /**
     * Converts a MathML expression into the programming language, using the
     * MAL file specification used to compile this transform.
     * The AnnoSet can be set up as follows:
     *   bvarIndex annotation on a bound variable: what to call the bound variable in the output.
     *   expression on a variable: How to represent the variable (when not a derivative) in the output.
     *   delayed_expression: How to represent an infinitesimally delayed version of the variable in the output.
     *   expression_d&lt;index> on a variable: How to represent the &lt;index>th derivative in the output.
     *   delayed_expression_d&lt;index> on a variable: How to represent an infinitesimally delayed version of the
     *     &lt;index>th derivative in the output.
     * @param aCeVAS The CeVAS object to use to find variable sources.
     * @param aCUSES The CUSES object to use for unit conversions.
     * @param aAnnos The annotation set on which to look up variable names.
     * @param aMathML The MathML element tree to use.
     * @param aContext The CellML element (component or reaction) to use as
     *                 context for resolving variables.
     * @param aUnitsOf A variable into which the value is being stored.
     *                 Providing this allows MaLaES to apply an appropriate
     *                 units conversion to the expression. This may be set to
     *                 null in which case no units conversion will occur on the
     *                 result.
     * @param aBoundUnitsOf A bound variable by which the variable is being
     *                      differentiated. Providing this allows MaLaES to compute
     *                      the required units for derivatives.
     * @param aUnitsDiffDegree The degree to which aUnitsOf is differentiated (0 if
     *                         it has not been differentiated, 1 for first derivative,
     *                         and so on).
     */
    MaLaESResult transform(
                           in cellml_services::CeVAS aCeVAS,
                           in cellml_services::CUSES aCUSES,
                           in cellml_services::AnnotationSet aAnnos,
                           in mathml_dom::MathMLElement aMathML,
                           in cellml_api::CellMLElement aContext,
                           in cellml_api::CellMLVariable aUnitsOf,
                           in cellml_api::CellMLVariable aBoundUnitsOf,
                           in unsigned long aUnitsDiffDegree
                          );

    /**
     * This function is used to modify a model from an untrusted source to make
     * it so no part of the model is likely to be exposed in MaLaES generated code
     * except as alphanumeric characters and _. This can be used to help ensure
     * that the CellML API is not exploited.
     * It makes the following changes to the model:
     *   * Any passthrough csymbols are removed.
     *   * name attributes on cellml:variable and cellml:component elements, and
     *     text node children of mathml:ci elements are changed to contain only
     *     characters matching [A-Za-z0-9_] (and whitespace in the case of mathml:ci).
     * Depending on how the API is used, there may be other vectors by which
     * code can get from the model into the generated code; preventing these is
     * the responsibility of the user of the API.
     * Note: This causes imports to be fully instantiated, if not already,
     *       and changes the in-memory version of imported models recursively.
     */
    void stripPassthrough(in cellml_api::Model aModel);

    /**
     * Transforms an expression that evaluates to a number into the corresponding
     * expression used by MaLaES, as defined by the MAL input.
     */
    wstring wrapNumber(in wstring rawExpression);
  };

  /**
   * The bootstrap interface that can be used as a MaLaES transformer factory.
   */
  interface MaLaESBootstrap
    : XPCOM::IObject
  {
    /**
     * Creates a MaLaES object.
     * @param specification The MAL format description of what language to
     *                      output.
     */
    MaLaESTransform compileTransformer(in wstring specification);
  };
};
#endif //_MaLaES_idl_ 
