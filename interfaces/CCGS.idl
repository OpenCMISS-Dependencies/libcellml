/**
 * @file
 * The CCGS, or CellML Code Generation Service, provides services which allow
 * code in a procedural language to be generated for an entire CellML model. The
 * CCGS computes the order in which procedural steps should be performed, and
 * uses the MaLaES service to generate expressions in the desired language.
 */
#include "CellML_APISPEC.idl"
#include "MathML_content_APISPEC.idl"
#include "MaLaES.idl"

/**
 * A module for various CellML Services.
 */
module cellml_services
{
  interface CustomGenerator;

  enum VariableEvaluationType
  {
    /**
     * The target appears in the MathML as a bvar for a derivative,
     * (i.e. is the variable of integration).
     */
    VARIABLE_OF_INTEGRATION,
    
    /**
     * The target has a specific, immediate value, taken from an
     * initial_value attribute, or computed from other constants. It is
     * possible for both derivatives and non-state variables to be constant.
     */
    CONSTANT,
    
    /**
     * The target is a state variable, that is, it starts at an initial
     * value and evolves according to rates defined in the model.
     * Note that derivatives can be state variables too, for example if you
     * define d^3x/dt3 = t (where t is the variable of integration),
     * then d^3x/dt3 is COMPUTED, while d^2x/dt2, dx/dt, and x are
     * of type STATE_VARIABLE.
     */
    STATE_VARIABLE,
    
    /**
     * The target is not a state variable, but can be computed from constants,
     * state variables, variable(s) of integration and other 'algebraic'
     * variables.
     */
    ALGEBRAIC,
    
    /**
     * No way to compute the variable has yet been determined. This can happen
     * if the model is under-constrained or unsuitably constrained, and no
     * constraint would allow the variable to be computed, or if the model is
     * overconstrained and the algorithm stopped before it worked out how to
     * compute this variable.
     */
    FLOATING,
    
    /**
     * The variable is used only locally, for example as the bound variable of a
     * definite integral.
     */
    LOCALLY_BOUND,
    
    /**
     * IDA-type only: A variable which changes with time, but is not driven by a
     * higher derivative. In non-IDA type code generation, this would be an
     * algebraic variable which makes up part of a system of equations.
     */
    PSEUDOSTATE_VARIABLE
  };

  enum ModelConstraintLevel
  {
    /**
     * The model is underconstrained. In this case, all code fragments will be
     * empty strings. The set of targets which cannot be computed can be found
     * because their VariableEvaluationType will be FLOATING. In order to make
     * the model work, it is necessary to add equations or initial conditions
     * which define some of these variables in terms of variables which can be
     * computed.
     */
    UNDERCONSTRAINED,
    
    /**
     * There were variables which couldn't be found, but there were also
     * equations which could not be used. This normally means that there is
     * a system of equations which would need to be solved. However, in some
     * cases, adding more constraints may allow the model to get past the
     * this and be solved.
     */
    UNSUITABLY_CONSTRAINED,
    
    /**
     * The model is overconstrained. The code generator will stop at the point
     * where a redundant equation was found. The redundant equation will be
     * present in flaggedEquations. The evaluation type will show the variables
     * that have already been assigned.
     */
    OVERCONSTRAINED,
    
    /**
     * The model is correctly constrained. flaggedEquations contains all
     * equations which are evaluated using the Newton-Raphson solver.
     */
    CORRECTLY_CONSTRAINED
  };

  interface ComputationTarget
    : XPCOM::IObject
  {
    /**
     * The variable associated with this computable. Note that there can be
     * more than one computable for a single variable.
     */
    readonly attribute cellml_api::CellMLVariable variable;
    
    /**
     * The degree associated with the variable. This is zero if the value isn't
     * a derivative, one for a first order derivative, two for a second order
     * derivative, and so on.
     */
    readonly attribute unsigned long degree;
    
    /**
     * The type of variable.
     */
    readonly attribute VariableEvaluationType type;
    
    /**
     * The expression for the variable in the procedural language. This is
     * taken from the expression or expression_d&lt;derivative> annotations
     * associated with the variable, which will usually have been expanded
     * based on the patterns provided to the CodeGenerator.
     */
    readonly attribute wstring name;
    
    /**
     * Fetches the index assigned to this variable.
     * @exception CellMLException if no index was assigned to the variable.
     */
    readonly attribute unsigned long assignedIndex;
  };
#pragma terminal-interface
  
  interface ComputationTargetIterator
    : XPCOM::IObject
  {
    /**
     * Fetches the next computation target.
     */
    ComputationTarget nextComputationTarget();
  };
#pragma terminal-interface
  
  interface CodeInformation
    : XPCOM::IObject
  {
    /**
     * The error message, in the event that something is wrong with the model.
     * If this is set, code should not use further operations or attributes on
     * this object.
     */
    readonly attribute wstring errorMessage;
    
    /**
     * The constraint level, describing whether or not the model is correctly
     * constrained. Note that improperly constrained models result in
     * constraintLevel being set, rather than setting an errorMessage.
     */
    readonly attribute ModelConstraintLevel constraintLevel;
    
    /**
     * The number of variables which were assigned indices in the algebraic
     * variables array. This counts a single CellML variable multiple times if
     * extra variables are inserted due to higher order derivatives.
     */
    readonly attribute unsigned long algebraicIndexCount;
    
    /**
     * The number of variables which were assigned indices into the rates
     * and state variables array. This counts a single CellML variable multiple
     * times if extra rates are inserted due to higher order derivatives.
     */
    readonly attribute unsigned long rateIndexCount;
    
    /**
     * The number of variables which were assigned indices into the constants
     * array.
     */
    readonly attribute unsigned long constantIndexCount;
    
    /**
     * There are three types of code strings that can be obtained, each for a
     * different purpose. Note that as variables are computed, they are added
     * into 'Known variables'.
     * Definitions:
     *   State variable: A variable of which the first or higher derivative
     *     is taken.
     *   VOI or Variable of Integration: A variable with respect to which the
     *     model is being integrated.
     * <table>
     * <tr><th>String</th><th>Targeted Variables</th><th>Possibly computed variables</th><th>Known variables</th><th>Purpose</th></tr>
     * <tr><td>initConsts</td>
     *     <td>All variables which aren't state variables but have an initial_value attribute, and any variables & rates which follow</td>
     *     <td>Any variable or rate except VOIs & state variables</td>
     *     <td>None</td><td>Setting up constants and values computed from them. Also sets up samples of uncertain values</td>
     * </tr>
     * <tr><td>rates</td><td>All rates which are not static</td><td>Any variable or rate</td><td>Everything set above, VOIs, & state variables</td>
     *     <td>Efficiently computing rates for the ODE solver</td></tr>
     * <tr><td>variables</td><td>All variables not computed above</td><td>Any variable</td><td>Everything set above, VOIs, and state variables</td>
     *     <td>Computing the remaining variables</td></tr>
     * </table>
     *
     * Note that some rates also have corresponding higher order entries in the state
     * variables array. These rates are copied from the state variables array into the
     * rates array at the beginning of the rates string, and may be relied upon in the
     * rates string.
     * e.g.
     * <table>
     *  <tr><th>Array / Index </th><td>0</td>    <td>    1    </td><td>    2    </td></tr>
     *  <tr><td>   STATES     </td><td>  x  </td><td>  dx/dt  </td><td>d^2x/dt^2</td></tr>
     *  <tr><td>    RATES     </td><td>dx/dt</td><td>d^2x/dt^2</td><td>d^3x/dt^3</td></tr>
     * </table>
     * RATES[1] is copied from STATES[2], and RATES[0] is copied from STATES[1].
     */

    /**
     * The initConsts string, as described in the table above.
     */
    readonly attribute wstring initConstsString;

    /**
     * The rates string, as described in the table above.
     */
    readonly attribute wstring ratesString;

    /**
     * The variables string, as described in the table above.
     */
    readonly attribute wstring variablesString;

    /**
     * A string containing any supplementary code which is needed to be used
     * out-of-line by the above strings. Whether or not supplementary code
     * is used, and exactly what it means depends on the MAL file used with
     * MaLaES, and the options set on the CodeGenerator. Typically, for C, it
     * is used to define extra functions that are passed as arguments to
     * functions being called from expressions.
     */
    readonly attribute wstring functionsString;

    /**
     * Iterates through all computation targets.
     */
    ComputationTargetIterator iterateTargets();

    /**
     * The list of flagged equations. Which equations are flagged depends on
     * the outcome in constraintLevel. See the documentation on
     * ModelConstraintLevel for more information.
     */
    readonly attribute mathml_dom::MathMLNodeList flaggedEquations;

    /**
     * If the solver failed with an underconstrained error, and this is non-null,
     * it means the cause of the failure was a missing initial condition on this
     * state variable.
     */
    readonly attribute ComputationTarget missingInitial;
  };
#pragma cross-module-argument

  interface CodeGenerator
    : XPCOM::IObject
  {
    /**
     * The pattern used to generate constant names (if they are not already
     * annotated). The % character is replaced with the array index.
     * Default: CONSTANTS[%]
     */
    attribute wstring constantPattern;

    /**
     * The pattern used to generate state variable names (if they are not already
     * annotated). The % character is replaced with the array index.
     * Default: STATES[%]
     */
    attribute wstring stateVariableNamePattern;

    /**
     * The pattern used to generate algebraic variable names (if they are not
     * already annotated). The % character is replaced with the array index.
     * Default: ALGEBRAIC[%]
     */
    attribute wstring algebraicVariableNamePattern;

    /**
     * The pattern used to generate rate names (if they are not already
     * annotated). The % character is replaced with the array index.
     * Default: RATES[%]
     */
    attribute wstring rateNamePattern;

    /**
     * The pattern used to generate variable of integration names (if they are
     * not already annotated). The % character is replaced with the array index.
     * Default: VOI
     */
    attribute wstring voiPattern;
    
    /**
    * The pattern used to generate code for sampling from a density function.
    * &lt;SUP> can be used to split the code into a main and supplementary part.
    * &lt;EXPR> will be substituted for the expression for the probability density
    *  function.
    * &lt;ID> will be substituted for a number which is unique for each instance
    *  in which this pattern is used (within that substitution).
    * Default: SampleUsingPDF(&pdf_&lt;ID>, CONSTANTS, ALGEBRAIC)&lt;SUP>double pdf_&lt;ID>(double bvar, double* CONSTANTS, double* ALGEBRAIC)\\r\\n{\\r\\n  return (&lt;EXPR>);\\r\\n}\\r\\n
    */
   attribute wstring sampleDensityFunctionPattern;

   /**
    * The pattern used to generate code for sampling using realisations.
    * &lt;numChoices> will be substituted for the number of realisations to choose
    *  between.
    * The code between &lt;eachChoice>...&lt;/eachChoice> will be substituted for
    *  each of the choices.
    * In this region, &lt;choiceNumber> gives the zero-based index of the choice,
    *                 &lt;choiceAssignments> gives the assignments that are
    *                   required when the choice is selected.
    * Default: switch (rand() % &lt;numChoices>)\\r\\n{\\n&lt;eachChoice>case &lt;choiceNumber>:\\r\\n&lt;choiceAssignments>break;\\r\\n&lt;/eachChoice>}\\r\\n
    */
   attribute wstring sampleRealisationsPattern;

   /**
    * The name to use for the locally bound variable given to the probability
    * density function in the generated code.
    * Default: bvar
    */
   attribute wstring boundVariableName;

   /**
     * The offset at which array indices start. This is normally 0 for
     * languages like C and 1 for languages like MATLAB and FORTRAN.
     * Default: 0
     */
    attribute unsigned long arrayOffset;
    
    /**
     * The pattern which is used to set variables by assignment.
     * &lt;LHS> is replaced by the variable name.
     * &lt;RHS> is replaced by the expression for the right-hand side.
     * &lt;XMLID> is replaced by the ID attribute value of the equation
     *   (or variable in the case of an initial_value assignment).
     * Default: /* &lt;XMLID> *\/\r\n&lt;LHS> = &lt;RHS>;\\r\\n
     */
    attribute wstring assignPattern;

    /**
     * The pattern which is used to set constants by assignment.
     * &lt;LHS> is replaced by the variable name.
     * &lt;RHS> is replaced by the expression for the right-hand side.
     * &lt;XMLID> is replaced by the ID attribute value of the equation
     *   (or variable in the case of an initial_value assignment).
     * Default: /* &lt;XMLID> *\/\r\n&lt;LHS> = &lt;RHS>;\\r\\n
     */
    attribute wstring assignConstantPattern;

    /**
     * The pattern which is used to compute variables which cannot be set by
     * assignment.
     * &lt;LHS> is replaced by the expression for the first argument to the
     *          equality.
     * &lt;RHS> is replaced by the expression for the second argument to the
     *          equality.
     * &lt;SUP> causes the following text to go into the supplementary function
     *          array instead of the main code list.
     * &lt;VAR> gives the name to the variable to compute.
     * &lt;ID> is replaced with a numeric ID unique to this equation.
     * &lt;XMLID> is replaced by the ID attribute value of the equation.
     * Default: rootfind_&lt;ID>(VOI, CONSTANTS, RATES, STATES, ALGEBRAIC, pret);\\r\\n&lt;SUP>void objfunc_&lt;ID>(double *p, double *hx, int m, int n, void *adata)\\r\\n{\\r\\n  /* Solver for equation: &lt;XMLID> *\/\\r\\n  struct rootfind_info* rfi = (struct rootfind_info*)adata;\\r\\n#define VOI rfi->aVOI\\r\\n#define CONSTANTS rfi->aCONSTANTS\\r\\n#define RATES rfi->aRATES\\r\\n#define STATES rfi->aSTATES\\r\\n#define ALGEBRAIC rfi->aALGEBRAIC\\r\\n#define pret rfi->aPRET\\r\\n  &lt;VAR> = *p;\\r\\n  *hx = (&lt;LHS>) - (&lt;RHS>);\\r\\n#undef VOI\\r\\n#undef CONSTANTS\\r\\n#undef RATES\\r\\n#undef STATES\\r\\n#undef ALGEBRAIC\\r\\n#undef pret\\r\\n}\\r\\nvoid rootfind_&lt;ID>(double VOI, double* CONSTANTS, double* RATES, double* STATES, double* ALGEBRAIC, int* pret)\\r\\n{\\r\\n  static double val = &lt;IV>;\\r\\n  double bp, work[LM_DIF_WORKSZ(1, 1)];\\r\\n  struct rootfind_info rfi;\\r\\n  rfi.aVOI = VOI;\\r\\n  rfi.aCONSTANTS = CONSTANTS;\\r\\n  rfi.aRATES = RATES;\\r\\n  rfi.aSTATES = STATES;\\r\\n  rfi.aALGEBRAIC = ALGEBRAIC;\\r\\n  rfi.aPRET = pret;\\r\\n  do_levmar(objfunc_&lt;ID>, &val, &bp, work, pret, 1, &rfi);\\r\\n  &lt;VAR> = val;\\r\\n}\\r\\n
     */
    attribute wstring solvePattern;
    
    /**
     * The pattern which is used to solve a system of n equations in n unknowns.
     * &lt;EXPR> is replaced by the expression for the difference between the two sides
     *           of the equality.
     * &lt;SUP> causes the following text to go into the supplementary function
     *          array instead of the main code list.
     * &lt;VAR> gives the name to the variable to compute.
     * &lt;ID> is replaced with a numeric ID unique to this equation.
     * &lt;COUNT> is replaced with the number of equations / unknowns.
     * &lt;EQUATIONS> per equation text <JOIN> separator text &lt;/EQUATIONS>
     *   allows text to be generated per equation. Inside the per equation text,
     *   you can use the following:
     *     &VAR> - the code variable unknown associated with this index.
     *     &XMLID> - the MathML ID on the equation.
     *     &INDEX> - the index of the equation / unknown.
     *     &IV> - an initial value to use when solving for the variable.
     */
    attribute wstring solveNLSystemPattern;

    /**
     * The pattern which is used to determine the name of temporary variables
     * when they are required for infinitesimally expressions. The % is replaced
     * with a number unique to the temporary variable.
     * Default: temp%
     */
    attribute wstring temporaryVariablePattern;

    /**
     * The pattern used to declare that a temporary variable is in use.
     * The % is replaced with the temporary variable name.
     * Default: double %;
     */
    attribute wstring declareTemporaryPattern;

    /**
     * The pattern used when a top-level piecewise statement is encountered.
     * The generated output treats the first case specially, and this case has
     * the condition and statement outside of &lt;CASES>. The generated output for
     * the remaining cases is produced by repeating the pattern between &lt;CASES>
     * and &lt;/CASES>.
     * Default: if (&lt;CONDITION>)\\r\\n{\\r\\n  &lt;STATEMENT>\\r\\n}\\r\\n&lt;CASES>else if (&lt;CONDITION>)\\r\\n{\\r\\n  &lt;STATEMENT>\\r\\n}\\r\\n&lt;/CASES>
     */
    attribute wstring conditionalAssignmentPattern;

    /**
     * A MaLaES transform to use. If will be null if it has not been set, and
     * no code has been generated from this generator. If generateCode is
     * called but this is null, a new default MaLaESTransform will be created,
     * with a MAL description suitable for use in C programs.
     * Default: null
     */
    attribute cellml_services::MaLaESTransform transform;

    /**
     * The CeVAS association to use. If this is null (the default) a new CeVAS
     * will be requested every time you call generateCode. Be careful to use a
     * CeVAS which corresponds to the exact model being passed in to
     * generateCode. The model cannot be changed once the CeVAS is created,
     * until the CeVAS is destroyed.
     * Default: null
     */
    attribute cellml_services::CeVAS useCeVAS;

    /**
     * The CUSES object to use. If this is null (the default) a new CUSES
     * will be requested every time you call generateCode. Be careful to use a
     * CUSES which corresponds to the exact model being passed in to
     * generateCode. The model cannot be changed once the CUSES is created,
     * until the CUSES is destroyed.
     * Default: null
     */
    attribute cellml_services::CUSES useCUSES;

    /**
     * The annotation set to use. If this is null (the default) a new AnnoSet
     * will be requested every time you call generateCode.
     */
    attribute cellml_services::AnnotationSet useAnnoSet;
    
    /**
     * Generates a CodeInformation object for a model.
     * @param sourceModel The model for which to generate the CodeInformation.
     */
    CodeInformation generateCode(in cellml_api::Model sourceModel);
    
    /**
     * Creates a CustomGenerator object for a model. Note that this picks
     * up on the transform, CeVAS, CUSES, AnnoSet, stateVariableNamePattern,
     * assignPattern, solvePattern, solveNLSystemPattern,
     * and arrayOffset - everything else is specific to generateCode.
     */
    CustomGenerator createCustomGenerator(in cellml_api::Model sourceModel);
    
    /**
     * If false, any text entered shall be passed through the MaLaES sanitiser to
     * strip out passthrough text. This prevents the generated code from containing
     * untrusted code from an untrusted model (depending on the target language
     * and the MaLaES definitions used).
     *
     * If true, no such sanitisation shall be performed, and it is possible to
     * inject arbitrary code from the model into the generated code by using
     * a MathML csymbol element like the following:
     *    &lt;mathml:csymbol
     *       definitionURL="http://www.cellml.org/tools/api#passthrough">
     *  code-to-inject&lt;/mathml:csymbol>
     *
     * Default: false
     */
    attribute boolean allowPassthrough;
  };
#pragma cross-module-argument

  interface CustomCodeInformation
    : XPCOM::IObject
  {
    /**
     * The constraint level, describing whether or not the model is correctly
     * constrained. Note that improperly constrained models result in
     * constraintLevel being set, rather than setting an errorMessage.
     * Note: Depending on how you are using the custom code generator, an
     *       underconstrained result might be normal (especially if you are
     *       generating code in phases, and don't expect to solve for everything
     *       in one round).
     */
    readonly attribute ModelConstraintLevel constraintLevel;
    
    /**
     * The number of variables which were assigned indices in the variables
     * array. There can be multiple entries for the same CellML variable - at
     * most one for each degree of integration.
     */
    readonly attribute unsigned long indexCount;
    
    /**
     * Iterates through all computation targets. Several things to note:
     *  * The objects retrieved are copied and changed from those fetched from
     *    CustomGenerator - so they have different object IDs.
     *  * The ComputationTarget type is overloaded for a different purpose to
     *    those used in non-custom CodeGeneration. The type should be interpreted
     *    as follows:
     *      VARIABLE_OF_INTEGRATION => Target is independent (markAsKnown called).
     *      STATE_VARIABLE => Target was requested, and is available.
     *      PSEUDOSTATE_VARIABLE => Target was requested, but could not be
     *                              computed from the independent variables + model.
     *      LOCALLY_BOUND => Target is locally bound in expressions only.
     *      ALGEBRAIC => Target is used as an intermediate.
     *      FLOATING => Every other target (i.e. unused, not requested).
     */
    ComputationTargetIterator iterateTargets();

    /**
     * The actual generated code. It won't have any kind of wrapping around it
     * such as function boilerplate - that is up to the user of the API.
     */
    readonly attribute wstring generatedCode;

    /**
     * A string containing any supplementary code which is needed to be used
     * out-of-line by the above string. Whether or not supplementary code
     * is used, and exactly what it means depends on the MAL file used with
     * MaLaES, and the options set on the CodeGenerator. Typically, for C, it
     * is used to define extra functions that are passed as arguments to
     * functions being called from expressions.
     */
    readonly attribute wstring functionsString;
};

interface CustomGenerator
  : XPCOM::IObject
{
  /**
   * Iterates through all computation targets.
   */
  ComputationTargetIterator iterateTargets();
  
  /**
   * Requests computation of a particular computation target, if computation
   * is possible.
   * @exception CellMLException if ComputationTarget not in target set.
   */
  void requestComputation(in ComputationTarget wanted) raises(cellml_api::CellMLException);

  /**
   * Sets a particular computation target as being 'known' (for example, this
   * can be used to set independent variables, or variables which are computed
   * elsewhere in the code).
   * @exception CellMLException if ComputationTarget not in target set.
   */
  void markAsKnown(in ComputationTarget known);

  /**
   * Sets a particular computation target as being 'unwanted', meaning that it
   * will not be considered as a potential intermediate to compute the requested
   * variables.
   * @exception CellMLException if ComputationTarget not in target set.
   */
  void markAsUnwanted(in ComputationTarget unwanted);

  /**
   * Generate the custom code for computing the requested variables.
   */
  CustomCodeInformation generateCode();
};

 interface IDACodeInformation
   : CodeInformation
 {
   /**
    * There are three types of code strings that can be obtained, each for a
    * different purpose. Note that as variables are computed, they are added
    * into 'Known variables'. This table differs slightly from CodeInformation
    * even for the common inherited strings.
    *
    * Definitions:
    *   State variable: A variable of which the first or higher derivative
    *     is taken.
    *   VOI or Variable of Integration: A variable with respect to which the
    *     model is being integrated.
    * +----------+--------------------+-----------------+--------------+------------------+
    * |  String  | Targeted Variables |Possibly computed|    Known     |     Purpose      |
    * |          |                    |    variables    |  Variables   |                  |
    * +----------+--------------------+-----------------+--------------+------------------+
    * |initConsts|All variables which |   Any variable  |   None       |Setting up        |
    * |          |aren't state        |    or rate      |              |constants and     |
    * |          |variables but have  | except VOIs &   |              |values computed   |
    * |          |an initial_value    |  state variables|              |from them.        |
    * |          |attribute, and any  | & pseudostate   |              |                  |
    * |          |variables & rates   | variables.      |              |                  |
    * |          |which follow.       |                 |              |                  |
    * +----------+--------------------+-----------------+--------------+------------------+
    * |essential |All variables which |Any variable     |Everything set|Computing variable|
    * |Variables |are not rates, have |                 |above, VOIs,  |s other than state|
    * |          |analytic solution, &|                 |and state     |variables.        |
    * |          |needed for rates.   |                 |variables     |                  |
    * +----------+--------------------+-----------------+--------------+------------------+
    * |  rates   |The residuals of all|Any variable or  |Everything set|Efficiently       |
    * |          |rates and states and|rate             |above, VOIs,  |computing rates   |
    * |          |pseudostate variable|                 |& state       |for the ODE solver|
    * |          |s.                  |                 |variables     |                  |
    * +----------+--------------------+-----------------+--------------+------------------+
    * |variables |All variables not   |Any variable     |Everything set|Computing the     |
    * |          |are not rates, have |                 |above, VOIs,  |remaining         |
    * |          |analytic solution, &|                 |and state     |variables.        |
    * |          |needed for rates.   |                 |variables     |                  |
    * +----------+--------------------+-----------------+--------------+------------------+
    */

   /**
    * The essential variables string, as described in the table above.
    */
   readonly attribute wstring essentialVariablesString;

   /**
    * The string for setting up the state information descriptor.
    */
   readonly attribute wstring stateInformationString;

   /**
    * The number of condition variables allocated by the trackPiecewiseConditions
    * feature. This will be 0 if trackPiecewiseConditions was turned off.
    */
   readonly attribute unsigned long conditionVariableCount;

   /**
    * A string for computing the roots controlling each condition variable.
    */
   readonly attribute wstring rootInformationString;
 };
#pragma terminal-interface
#pragma cross-module-argument

 interface IDACodeGenerator
   : CodeGenerator
 {
   /**
    * Generates an IDACodeInformation object for a model.
    * @param sourceModel The model for which to generate the IDACodeInformation.
    */
   IDACodeInformation generateIDACode(in cellml_api::Model sourceModel);

   /**
    * The pattern used when generating the residual computations for IDA.
    * &lt;RNO> is replaced with the index of the residual.
    * &lt;LHS> is replaced with the left-hand side of the equation.
    * &lt;RHS> is replaced with the right-hand side of the equation.
    * &lt;XMLID> is replaced by the ID attribute value of the equation.
    * Default: \/* &lt;XMLID> *\/\\r\\nresid[&lt;RNO>] = &lt;LHS> - &lt;RHS>;\\r\\n
    */
   attribute wstring residualPattern;

   /**
    * The pattern used when generating the 'state' information descriptor, for
    * state variables where there is a constraint on the rate.
    * &lt;ID> is replaced by the identifier of the variable.
    * Default: SI[&lt;ID>] = 1.0;\\r\\n
    */
   attribute wstring constrainedRateStateInfoPattern;

   /**
    * The pattern used when generating the 'state' information descriptor, for
    * state variables where there is no constraint on the rate.
    * &lt;ID> is replaced by the identifier of the variable.
    * Default: SI[&lt;ID>] = 0.0;\\r\\n
    */
   attribute wstring unconstrainedRateStateInfoPattern;

   /**
    * The pattern used for an 'infinitesimally delayed' rate variable (usually
    * approximated as the value at the previous timestep).
    * Default: RATES[%]
    */
   attribute wstring infDelayedRatePattern;

   /**
    * The pattern used for an 'infinitesimally delayed' state variable (usually
    * approximated as the value at the previous timestep).
    * Default: STATES[%]
    */
   attribute wstring infDelayedStatePattern;

   /**
    * Whether or not all piecewise conditions should be refactored in terms of
    * special variables which change sign, suitable for use with a rootfinder
    * to restart the integrator.
    * Default: true
    */
   attribute boolean trackPiecewiseConditions;

   /**
    * A pattern for condition variables. Only used if trackPiecewiseConditions
    * is true. % is substituted for the allocated index.
    * Default: CONDVAR[%]
    */
   attribute wstring conditionVariablePattern;
 };
#pragma terminal-interface
#pragma cross-module-argument

 interface CodeGeneratorBootstrap
   : XPCOM::IObject
 {
   CodeGenerator createCodeGenerator();
   IDACodeGenerator createIDACodeGenerator();
 };
#pragma terminal-interface
#pragma cross-module-argument

};
