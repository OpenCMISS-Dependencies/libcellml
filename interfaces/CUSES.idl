/**
 * @file
 * CUSES (the CellML Units Simplification and Expansion Service) provides
 * services for processing units in CellML, providing services such as looking
 * up unit names in specific contexts, and reducing units to the simplest form
 * involving only built in and user defined base units. It also provides
 * facilities for converting between different but dimensionally compatible
 * units.
 */
#include "CellML_APISPEC.idl"

/**
 * A module for various CellML Services.
 */
module cellml_services
{
  interface BaseUnit
    : XPCOM::IObject
  {
    /**
     * The name of the base units.
     */
    readonly attribute wstring name;
  };

  interface UserBaseUnit
    : BaseUnit
  {
    /**
     * The actual units on the base unit.
     */
    readonly attribute cellml_api::Units cellmlUnits;
  };

  /**
   * A reference to a base unit, optionally with a multiplier, offset,
   * and exponent set.  The canonical representation for a units
   * definition (see CanonicalUnitRepresentation) is built from a set
   * of such references.
   */
  interface BaseUnitInstance
    : XPCOM::IObject
  {
    /**
     * The unit being referenced.
     */
    readonly attribute BaseUnit unit;

    /**
     * The multiplier (including prefix derived multiplier) on the unit.
     * Note: This already takes into account the exponent, no need to
     * raise it to the power of the exponent.
     */
    readonly attribute double prefix;

    /**
     * The offset on the unit.
     */
    readonly attribute double offset;

    /**
     * The exponent on the unit.
     */
    readonly attribute double exponent;
  };

  /**
   * The canonical representation of a units definition, as the product of
   * powers of base units (perhaps with multiplicative factors, and optionally
   * an offset if there is a single base unit).
   */
  interface CanonicalUnitRepresentation
    : XPCOM::IObject
  {
    /**
     * Returns the number of base unit instances.
     */
    readonly attribute unsigned long length;

    /**
     * Fetches the nth base unit (0 for the first). The ordering is arbitrary,
     * but fixed for a given CUSES instance.
     *
     * @param index The index of the base unit.
     * @returns The base unit instance at the specified index.
     * @exception CellMLException on error.
     */
    BaseUnitInstance fetchBaseUnit(in unsigned long index)
      raises(cellml_api::CellMLException);

    /**
     * Compares one unit representation with another.
     *
     * Whether this checks for exact unit identity or dimensional equivalence
     * depends on whether the CUSES object used to create this representation
     * is strict or not.
     *
     * @param aCompareWith the unit representation to compare with.
     * @returns True if the units are equivalent.
     */
    boolean compatibleWith(in CanonicalUnitRepresentation aCompareWith);

    /**
     * Computes the conversion needed if you have a value in the units of this
     * object, and you want to convert it to another. If x is the value in the
     * units of this object, and y is the desired value, the equation is:
     *   y = A * x + b.
     * @param aConvertTo The units representation to convert to.
     * @param[out] offset The value b in the equation above.
     * @returns The multiplier, i.e. the value A in the equation above.
     */
    double convertUnits(in CanonicalUnitRepresentation aConvertTo,
                        out double offset);

    /**
     * Computes the conversion needed to convert to the SI base units
     * representation (i.e. where the base units referenced are kg, m, etc.
     * rather than, say, g, cm, etc.). The equation is:
     *  y = A * x + b
     * Where y is the SI base units, and x is the current units.
     * @param[out] offset the value b in the equation above.
     * @returns The multiplier, i.e. the value A in the equation above.
     */
    double siConversion(out double offset);

    /**
     * Adds a new base unit to the canonical unit representation. Under normal
     * circumstances, CanonicalUnitRepresentations should be treated as
     * immutable, but this is provided as an aid to code which wishes to create
     * its own CanonicalUnitRepresentations for other purposes.
     */
    void addBaseUnit(in BaseUnitInstance baseUnit);

    /**
     * Merges this unit with another CanonicalUnitRepresentation, applying an
     * exponent along the way. This performs the operations of the units
     * algebra, and can be used to form products or quotients of units, or (by
     * setting otherExponent to zero) to just raise this definition to the
     * given exponent.
     * @param thisExponent The exponent to apply to this canonical unit
     *                     representation.
     * @param other The other canonical unit representation. This is ignored
     *              and may be null if otherExponent is zero.
     * @param otherExponent The exponent to apply to the other canonical unit
     *                      representation.
     * @exception CellMLException if other is null and otherExponent is non-zero.
     */
    CanonicalUnitRepresentation mergeWith(in double thisExponent,
                                          in CanonicalUnitRepresentation other,
                                          in double otherExponent)
      raises(cellml_api::CellMLException);
  };

  /**
   * The primary interface to units processing services for a model.
   */
  interface CUSES
    : XPCOM::IObject
  {
    /**
     * A description of any units errors found in the model (CUSES does not
     * perform a complete validation, but can incidentally find some errors as
     * it performs its normal operations).
     * If no error is found, this will be the empty string. The results of any
     * other operation on this object is undefined if there is an error, and so
     * should not be called.
     */
    readonly attribute wstring modelError;

    /**
     * Gets a units representation for a string (giving the name of the units)
     * in a given context.
     * @param aContext The context. This must be part of the model
     *                 (or part of an imported model) for which this object was
     *                 created. It can be any element in the model, but would
     *                 generally be a component, units, or model element.
     * @param aName The units name to look up. This can be a built-in unit, or
     *              a user-defined unit.
     * @returns The units representation, or null if the name is invalid.
     */
    CanonicalUnitRepresentation getUnitsByName(in cellml_api::CellMLElement aContext,
                                               in wstring aName);

    /**
     * Creates an empty CanonicalUnitRepresentation, which may be used
     * by code which wants to compare units in the model with synthesised
     * units.
     */
    CanonicalUnitRepresentation createEmptyUnits();
  };

  interface CUSESBootstrap
    : XPCOM::IObject
  {
    /**
     * Creates a CUSES object for a given model. The CUSES object is not live,
     * and the model should not be changed while the CUSES object is in use.
     * @param aModel The top-level model on which the CUSES should operate.
     * @param aStrict If true, then multipliers must be identical and
     *                present in exactly the same place (units
     *                consistency, as could be used on, e.g.
     *                mathematics). Otherwise, check for dimensional consistency
     *                (as is used to check connection consistency).
     * @returns A CUSES object.
     */
    CUSES createCUSESForModel(in cellml_api::Model aModel, in boolean aStrict);
  };
};
