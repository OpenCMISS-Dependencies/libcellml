/*!
\page java_tutorial Java tutorial

\section java_docs_about About the Java documentation

This documentation starts off with a few examples, and then moves into Java-specific
reference documentation. Much of the CellML API documentation is language
independent, so once you have a grasp of how the language independent documentation
relates to Java, refer to the documentation (for example, interfaces listed in the
class listing) for more details on how to use the services the API provides.

\section java_bridge Loading java_cellml library 

Here we create a class to load the java_cellml library.

\code 

import cellml_api.CellMLBootstrap;

public class CellMLLoader {
	private CellMLBootstrap bootstrap;
	
	public CellMLLoader(){
		System.loadLibrary("java_cellml");
		bootstrap =  cellml_bootstrap.CellMLBootstrap.createCellMLBootstrap();	
	}
	
	public CellMLBootstrap getCellMLBootstrap(){
		return bootstrap;
	}

}
\endcode

\section read_cellml Loading and creating CellML models

Here we create a class with methods that we could call to create or load CellML models.

\code 

import cellml_api.CellMLBootstrap;
import cellml_api.Model;

public class CellMLReader {

	public static Model loadFromURL(CellMLBootstrap cb, String inputFileName){
		return cb.getModelLoader().loadFromURL(inputFileName);
	}

	public static Model createModel(CellMLBootstrap cb, String modelString){
		return cb.createModel(modelString);
	}
}

\endcode


\section iterate_elements Iterating CellML elements

The example shown below iterates through components, variables, and connections defined in the Hodgkin-Huxley model that is available at http://www.cellml.org/models/hodgkin_huxley_1952_version07/download.

\code 

import cellml_api.CellMLComponent;
import cellml_api.CellMLComponentIterator;
import cellml_api.CellMLComponentSet;
import cellml_api.CellMLVariable;
import cellml_api.CellMLVariableIterator;
import cellml_api.CellMLVariableSet;
import cellml_api.Connection;
import cellml_api.ConnectionIterator;
import cellml_api.ConnectionSet;
import cellml_api.MapComponents;
import cellml_api.MapVariables;
import cellml_api.MapVariablesIterator;
import cellml_api.MapVariablesSet;
import cellml_api.Model;

public class IterateElementTest {
	
	CellMLLoader cLoader;
	
	public IterateElementTest(){
		cLoader = new CellMLLoader();
	}

	private void iterateModelElements(){   	

		Model model = CellMLReader.loadFromURL(cLoader.getCellMLBootstrap(),
							"http://www.cellml.org/models/hodgkin_huxley_1952_version07/download");

		System.out.println("Model Name:" + model.getName() + "\n");


		CellMLComponentSet componentSet = model.getModelComponents();
		CellMLComponentIterator iter = componentSet.iterateComponents();

		for(int i = 0; i < componentSet.getLength(); i++){
			CellMLComponent comp = iter.nextComponent();
			System.out.println("Component Name:"+comp.getName());

			CellMLVariableSet variableSet = comp.getVariables();
			CellMLVariableIterator varIter = variableSet.iterateVariables();

			for(int j = 0; j < variableSet.getLength(); j ++){
				CellMLVariable variable = varIter.nextVariable();
				System.out.println("Variable Name:"+variable.getName());
			}
			System.out.println();
		}

		ConnectionSet connectionSet = model.getConnections();
		ConnectionIterator conIter = connectionSet.iterateConnections();

		for(int i = 0; i < connectionSet.getLength(); i++){
			Connection connection = conIter.nextConnection();
			MapComponents mapComponent = connection.getComponentMapping();
			System.out.println("Connection Component1: "+mapComponent.getFirstComponentName() + 
					"    Component2: " + mapComponent.getSecondComponentName());

			MapVariablesSet variableSet = connection.getVariableMappings();
			MapVariablesIterator varIter = variableSet.iterateMapVariables();

			for(int j =0; j < variableSet.getLength(); j++){
				MapVariables mapVar = varIter.nextMapVariable();
				System.out.println("\t Variable1: "+mapVar.getFirstVariableName() + 
						"    Variable2: " + mapVar.getSecondVariableName());
			}
			System.out.println();
		}

	}
	
	public static void main(String [] args ){
		IterateElementTest ietest = new IterateElementTest();
		ietest.iterateModelElements();
	}
}


\endcode

To compile and run this code on Linux (with /path/to/sdk/ changed to the appropriate path):
<pre>
  export CLASSPATH=/path/to/sdk/lib/cellml.jar:.:$CLASSPATH
  export LD_LIBRARY_PATH=/path/to/sdk/lib:$LD_LIBRARY_PATH
  javac IterateElementTest.java
  java -Djava.library.path=/path/to/sdk/lib IterateElementTest
</pre>

On Windows (with c:/path/to/sdk/ changed to the appropriate path):
<pre>
  set CLASSPATH="c:/path/to/sdk/lib/cellml.jar;.;%CLASSPATH%"
  set PATH="c:/path/to/sdk/lib;%PATH%"
  javac IterateElementTest.java
  java "-Djava.library.path=c:/path/to/sdk/lib" IterateElementTest
</pre>

On Mac OS X:
<pre>
  export CLASSPATH=/path/to/sdk/lib/cellml.jar:.:$CLASSPATH
  export DYLD_LIBRARY_PATH=/path/to/sdk/lib:$LD_LIBRARY_PATH
  javac IterateElementTest.java
  java -Djava.library.path=/path/to/sdk/lib IterateElementTest
</pre>


\section write_cellml Writing CellML models to files

Here we create a class with a method that we could call to write CellML models to files.

\code 

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import cellml_api.Model;

public class CellMLWriter {

	public static void writeToFile(Model model, String outputFileName ){
		try{
			PrintWriter writer = new PrintWriter(new FileWriter(outputFileName));
			writer.println(model.getSerialisedText());
			writer.close();
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}

}

\endcode


\section create_cellML Creating a CellML 1.1 model

The example code below creates a CellML 1.1 model with two components.

\code 
import cellml_api.CellMLComponent;
import cellml_api.CellMLVariable;
import cellml_api.Connection;
import cellml_api.MapComponents;
import cellml_api.MapVariables;
import cellml_api.Model;
import cellml_api.Unit;
import cellml_api.Units;
import cellml_api.VariableInterface;

public class CreateModelTest {
	
	CellMLLoader cLoader;
	
	public CreateModelTest(){
		cLoader = new CellMLLoader();
	}
	
	private void createCellMLModel(){
		Model m = CellMLReader.createModel(cLoader.getCellMLBootstrap(),"1.1");
		m.setName("example1");

		Units units = m.createUnits();
		m.addElement(units);        
		units.setName("second");

		Unit unit = m.createUnit();
		units.addElement(unit);
		unit.setUnits("second");


		CellMLComponent comp1 = m.createComponent(); 
		m.addElement(comp1);
		comp1.setName("component1");        

		CellMLVariable var1 = m.createCellMLVariable();
		comp1.addElement(var1);
		var1.setName("variable1");
		var1.setUnitsElement(units);
		var1.setInitialValue("10");            	
		var1.setPublicInterface(VariableInterface.INTERFACE_OUT); 

		CellMLComponent comp2 = m.createComponent(); 
		m.addElement(comp2);
		comp2.setName("component2");          

		CellMLVariable var2 = m.createCellMLVariable();
		comp2.addElement(var2);
		var2.setName("variable2");
		var2.setUnitsElement(units);
		var2.setPublicInterface(VariableInterface.INTERFACE_IN);

		Connection con = m.createConnection();
		m.addElement(con);

		MapComponents mapComp = con.getComponentMapping();      
		mapComp.setFirstComponent(comp1);
		mapComp.setSecondComponent(comp2);      	

		MapVariables mapvar = m.createMapVariables();
		con.addElement(mapvar);

		mapvar.setFirstVariable(var1);
		mapvar.setSecondVariable(var2);      	

		CellMLWriter.writeToFile(m, m.getName()+ ".cellml");
	}
	
	public static void main(String [] args ){
		CreateModelTest cmtest = new CreateModelTest();
		cmtest.createCellMLModel();
	}

}
\endcode

\section java_concepts General concepts when using the CellML API Reference Implementation from Java
Every language-independent interface defined in this operation is mapped to a Java interface. Operations defined on the interfaces map to interface methods of the same name. Attributes map to a getter and a setter (or just a getter in the case of readonly attributes). The getter is named by pre-pending 'get' to the attribute name, capitalising the first letter of the attribute name. The setter is named similarly, except with a prefix of 'set'.

Java is a garbage collected language, and the CellML API Reference Implementation uses reference counting. The Java bridges make these work together by ensuring that a reference is kept whenever you reference a CellML API object from Java, and so for the most part a Java programmer does not need to worry about memory management with the CellML API. The one exception is that cycles, where Java code references the API, and the API references a callback to Java, need to be explicitly broken or the objects in the cycle will never be released.

The same CellML API object can implement multiple interfaces, but doing a Java cast between different interfaces supported by an object will not work, because access to the CellML API object is through a bridge, and each bridge object only supports one chain of interfaces. To get access to other interfaces supported by an object, you need to do a query_interface operation. In Java, you do this using a static method on the bridge of the interface you want to obtain. These bridge classes are named pjm2pcm.namespace.interfaceName, and the static method is called queryInterface. The return value is an object of that class; these classes implement the corresponding Java interfaces.

Note that before you use any objects from a particular Java service, you must load the bridge using System.loadLibrary("java_modulename"), where modulename is the name of the module for the service (for example, cellml for the core of the API, cis for the integration service, ccgs for the code generation service).

\section java_boot Bootstrapping in Java

The language-independent part of the CellML API documentation describes what interfaces objects can support, and how to get different objects by performing operations and retrieving attributes on the existing objects. However, there is a chicken-and-egg problem - you need to get the first object before you can do anything on an interface. This problem is solved differently in different language bindings. In Java, the reference implementation solves the problem using static native methods, called Bootstrap Methods, that return a Java interface.

Here are some of the bootstrap methods available in the CellML API:
<table>
  <tr><th>Service</th><th>Bootstrap method</th><th>Return type</th><th>Module to load</th></tr>
  <tr><td>Core</td><td>cellml_bootstrap.CellMLBootstrap.createCellMLBootstrap</td><td>cellml_api.CellMLBootstrap</td><td>java_cellml</td></tr>
  <tr><td>AnnoTools</td><td>cellml_bootstrap.AnnoToolsBootstrap.createAnnotationToolService</td><td>cellml_services.AnnotationToolService</td><td>java_annotools</td></tr>
  <tr><td>CCGS</td><td>cellml_bootstrap.CCGSBootstrap.createCodeGeneratorBootstrap</td><td>cellml_services.CodeGeneratorBootstrap</td><td>java_ccgs</td></tr>
  <tr><td>CGRS</td><td>cellml_bootstrap.CGRSBootstrap.createGenericsService</td><td>cellml_services.GenericsService</td><td>java_cgrs</td></tr>
  <tr><td>CIS</td><td>cellml_bootstrap.CISBootstrap.createIntegrationService</td><td>cellml_services.CellMLIntegrationService</td><td>java_cis</td></tr>
  <tr><td>CUSES</td><td>cellml_bootstrap.CUSESBootstrap.createCUSESBootstrap</td><td>cellml_services.CUSESBootstrap</td><td>java_cuses</td></tr>
  <tr><td>CeLEDS</td><td>cellml_bootstrap.CeLEDSBootstrap.createCeLEDSBootstrap</td><td>cellml_services.CeLEDSBootstrap</td><td>java_celeds</td></tr>
  <tr><td>CeLEDSExporter</td><td>cellml_bootstrap.CeLEDSExporterBootstrap.createCeLEDSExporterBootstrap</td><td>cellml_services.CeLEDSExporterBootstrap</td><td>java_celedsexporter</td></tr>
  <tr><td>CeVAS</td><td>cellml_bootstrap.CeVASBootstrap.createCeVASBootstrap</td><td>cellml_services.CeVASBootstrap</td><td>java_cevas</td></tr>
  <tr><td>MaLAES</td><td>cellml_bootstrap.MaLaESBootstrap.createMaLaESBootstrap</td><td>cellml_services.MaLaESBootstrap</td><td>java_malaes</td></tr>
  <tr><td>SProS</td><td>cellml_bootstrap.SProSBootstrap.createSProSBootstrap</td><td>SProS.Bootstrap</td><td>java_spros</td></tr>
  <tr><td>SRuS</td><td>cellml_bootstrap.SRuSBootstrap.createSRuSBootstrap</td><td>SRuS.Bootstrap</td><td>java_srus</td></tr>
  <tr><td>TeLICeMS</td><td>cellml_bootstrap.TeLICeMService.createTeLICeMService</td><td>cellml_services.TeLICeMService</td><td>java_telicems</td></tr>
  <tr><td>VACSS</td><td>cellml_bootstrap.VACSSBootstrap.createVACSService</td><td>cellml_services.VACSService</td><td>java_vacss</td></tr>
</table>

*/
